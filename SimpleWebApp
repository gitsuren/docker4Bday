Simple Web App
=============
docker container run -d seqvence/static-site
>> The -d flag enables detached mode, which detaches the running container from the terminal/shell and returns your prompt after the container starts. 

So, what happens when you run this command?

Since the image doesn’t exist on your Docker host, the Docker daemon first fetches it from the registry and then runs it as a container.

Now that the server is running, do you see the website? What port is it running on? And more importantly, how do you access the container directly from our host machine?

Actually, you probably won’t be able to answer any of these questions yet! ☺ In this case, the client didn’t tell the Docker Engine to publish any of the ports, so you need to re-run the docker container run command to add this instruction.

Let’s re-run the command with some new flags to publish ports and pass your name to the container to customize the message displayed. We’ll use the -d option again to run the container in detached mode.

First, stop the container that you have just launched. In order to do this, we need the container ID.

Since we ran the container in detached mode, we don’t have to launch another terminal to do this. Run docker container ls to view the running containers.
Check out the CONTAINER ID column. You will need to use this CONTAINER ID value, a long sequence of characters, to identify the container you want to stop, and then to remove it. The example below provides the CONTAINER ID on our system; you should use the value that you see in your terminal.

$ docker container stop a7a0e504ca3e
$ docker container rm   a7a0e504ca3e
Note: A cool feature is that you do not need to specify the entire CONTAINER ID. You can just specify a few starting characters and if it is unique among all the containers that you have launched, the Docker client will intelligently pick it up.
Now, let’s launch a container in detached mode as shown below:

docker container run --name static-site -e AUTHOR="Your Name" -d -P seqvence/static-site
e61d12292d69556eabe2a44c16cbd54486b2527e2ce4f95438e504afb7b02810
In the above command:

-d will create a container with the process detached from our terminal
-P will publish all the exposed container ports to random ports on the Docker host
-e is how you pass environment variables to the container
--name allows you to specify a container name
AUTHOR is the environment variable name and Your Name is the value that you can pass
Now you can see the ports by running the docker container port command.

docker container port static-site
443/tcp -> 0.0.0.0:32772
80/tcp -> 0.0.0.0:32773

If you were running Docker for Mac, Docker for Windows, or Docker on Linux, you would see your app at http://[YourDockerIP]:32773.

You can also run a second webserver at the same time, specifying a custom host port mapping to the container’s webserver.

docker container run --name static-site-2 -e AUTHOR="Your Name" -d -p 8888:80 seqvence/static-site

